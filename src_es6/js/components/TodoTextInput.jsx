import * as React from "react";
export default class TodoTextInput extends React.Component {
    constructor(props) {
        super(props);
        /**
         * Invokes the callback passed in as onSave, allowing this component to be
         * used in different ways.
         */
        this.save = () => {
            this.props.onSave(this.state.value);
            this.setState({
                value: ''
            });
        };
        /**
         *
         * @param event
         * @private
         */
        this.onChange = (event) => {
            this.setState({
                value: event.target.value
            });
        };
        /**
         * @param event
         * @private
         */
        this.onKeyDown = (event) => {
            if (event.keyCode === weavejs.util.KeyboardUtils.KEYCODES.ENTER) {
                this.save();
            }
        };
        this.state = {
            value: this.props.value || ''
        };
    }
    render() {
        return (<input className={this.props.className} id={this.props.id} placeholder={this.props.placeholder} onBlur={this.save} onChange={this.onChange} onKeyDown={this.onKeyDown} value={this.state.value} autoFocus={true}/>);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9kb1RleHRJbnB1dC5qc3giLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmNfdHMvanMvY29tcG9uZW50cy9Ub2RvVGV4dElucHV0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPO0FBZ0I5QiwyQ0FBMkMsS0FBSyxDQUFDLFNBQVM7SUFHekQsWUFBWSxLQUF3QjtRQUVuQyxNQUFNLEtBQUssQ0FBQyxDQUFDO1FBTWQ7OztXQUdHO1FBQ0ssU0FBSSxHQUFDO1lBRVosSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUNiLEtBQUssRUFBRSxFQUFFO2FBQ1QsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFBO1FBRUQ7Ozs7V0FJRztRQUNLLGFBQVEsR0FBQyxDQUFDLEtBQXFCO1lBRXRDLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ2IsS0FBSyxFQUFHLEtBQUssQ0FBQyxNQUEyQixDQUFDLEtBQUs7YUFDL0MsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFBO1FBRUQ7OztXQUdHO1FBQ0ssY0FBUyxHQUFDLENBQUMsS0FBeUI7WUFFM0MsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sS0FBSyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDakUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2IsQ0FBQztRQUNGLENBQUMsQ0FBQTtRQXRDQSxJQUFJLENBQUMsS0FBSyxHQUFHO1lBQ1osS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEVBQUU7U0FDN0IsQ0FBQTtJQUNGLENBQUM7SUFxQ0QsTUFBTTtRQUVMLE1BQU0sQ0FBQyxDQUNOLENBQUMsS0FBSyxDQUNMLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQ2hDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQ2xCLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQ3BDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDbEIsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUN4QixTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQzFCLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQ3hCLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUNmLENBQ0YsQ0FBQztJQUNILENBQUM7QUFDRixDQUFDO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGludGVyZmFjZSBUb2RvVGV4dElucHV0UHJvcHNcbntcblx0b25TYXZlOkZ1bmN0aW9uO1xuXHRjbGFzc05hbWU/OnN0cmluZztcblx0aWQ/OiBzdHJpbmc7XG5cdHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuXHR2YWx1ZT86c3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRvZG9UZXh0SW5wdXRTdGF0ZVxue1xuXHR2YWx1ZTpzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvZG9UZXh0SW5wdXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8VG9kb1RleHRJbnB1dFByb3BzLCBUb2RvVGV4dElucHV0U3RhdGU+XG57XG5cblx0Y29uc3RydWN0b3IocHJvcHM6VG9kb1RleHRJbnB1dFByb3BzKVxuXHR7XG5cdFx0c3VwZXIocHJvcHMpO1xuXHRcdHRoaXMuc3RhdGUgPSB7XG5cdFx0XHR2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSB8fCAnJ1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBJbnZva2VzIHRoZSBjYWxsYmFjayBwYXNzZWQgaW4gYXMgb25TYXZlLCBhbGxvd2luZyB0aGlzIGNvbXBvbmVudCB0byBiZVxuXHQgKiB1c2VkIGluIGRpZmZlcmVudCB3YXlzLlxuXHQgKi9cblx0cHJpdmF0ZSBzYXZlPSgpPT5cblx0e1xuXHRcdHRoaXMucHJvcHMub25TYXZlKHRoaXMuc3RhdGUudmFsdWUpO1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0dmFsdWU6ICcnXG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICpcblx0ICogQHBhcmFtIGV2ZW50XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwcml2YXRlIG9uQ2hhbmdlPShldmVudDpSZWFjdC5Gb3JtRXZlbnQpPT5cblx0e1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0dmFsdWU6IChldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWVcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0gZXZlbnRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHByaXZhdGUgb25LZXlEb3duPShldmVudDpSZWFjdC5LZXlib2FyZEV2ZW50KT0+XG5cdHtcblx0XHRpZiAoZXZlbnQua2V5Q29kZSA9PT0gd2VhdmVqcy51dGlsLktleWJvYXJkVXRpbHMuS0VZQ09ERVMuRU5URVIpIHtcblx0XHRcdHRoaXMuc2F2ZSgpO1xuXHRcdH1cblx0fVxuXG5cdHJlbmRlcigpXG5cdHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PGlucHV0XG5cdFx0XHRcdGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWV9XG5cdFx0XHRcdGlkPXt0aGlzLnByb3BzLmlkfVxuXHRcdFx0XHRwbGFjZWhvbGRlcj17dGhpcy5wcm9wcy5wbGFjZWhvbGRlcn1cblx0XHRcdFx0b25CbHVyPXt0aGlzLnNhdmV9XG5cdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfVxuXHRcdFx0XHRvbktleURvd249e3RoaXMub25LZXlEb3dufVxuXHRcdFx0XHR2YWx1ZT17dGhpcy5zdGF0ZS52YWx1ZX1cblx0XHRcdFx0YXV0b0ZvY3VzPXt0cnVlfVxuXHRcdFx0Lz5cblx0XHQpO1xuXHR9XG59Il19